import { useState, useEffect, createElement } from 'react';
import Big from 'big.js';

function NumberIncrement({
  inputAttr,
  inputType,
  interval,
  maxNumber,
  minNumber,
  onChange,
  readOnlyStyle,
  ...rest
}) {
  const id = rest.id || "";
  const style = rest.class || "";
  const widgetName = rest.name || "";
  const stepInterval = Number(interval);
  const [currentValue, setCurrentValue] = useState("");
  const [disabledValue, setDisabledValue] = useState(false);
  useEffect(() => {
    if (inputAttr.status === "available" && currentValue === "") {
      setCurrentValue(String(inputAttr.displayValue));
    } else if (currentValue !== "") {
      inputAttr.setValue(Big(currentValue));
    }
    if (inputAttr.status === "available" && inputAttr.readOnly === true) {
      setDisabledValue(true);
    }
  }, [currentValue, inputAttr]);
  function handleOnChange() {
    if (onChange && onChange.canExecute) {
      onChange.execute();
    }
  }
  function onChangeInput(event) {
    let value = event.target.value;

    // Remove leading zeros (but keep "0" if that's the only digit)
    value = value.replace(/^0+(?=\d)/, "");
    setCurrentValue(value);
    const numValue = Number(value);
    if (numValue >= maxNumber) {
      setCurrentValue(String(maxNumber));
      inputAttr.setValue(Big(maxNumber));
    } else if (numValue <= minNumber) {
      setCurrentValue(String(minNumber));
      inputAttr.setValue(Big(minNumber));
    } else {
      inputAttr.setValue(Big(value));
    }
    handleOnChange();
  }
  function onIncrement() {
    if (currentValue + stepInterval >= maxNumber) {
      setCurrentValue(maxNumber);
    } else {
      setCurrentValue(currentValue + stepInterval);
    }
    handleOnChange();
  }
  function onDecrement() {
    if (currentValue - stepInterval <= minNumber) {
      setCurrentValue(minNumber);
      inputAttr.setValue(Big(minNumber));
    } else {
      setCurrentValue(currentValue - stepInterval);
      inputAttr.setValue(Big(currentValue - stepInterval));
    }
    handleOnChange();
  }
  if (disabledValue && disabledValue === true && readOnlyStyle === "text") {
    return createElement("div", {
      className: `number-widget ${style}`
    }, createElement("p", {
      className: `${widgetName} form-control-static`
    }, currentValue, inputType));
  } else {
    return createElement("div", {
      className: `number-widget ${style}`
    }, createElement("input", {
      id: id,
      className: `${widgetName} form-control ${inputType && "has-type"}`,
      type: "number",
      onChange: onChangeInput,
      value: currentValue,
      disabled: disabledValue
    }), createElement("div", {
      className: "number-widget-buttons"
    }, disabledValue === false && createElement("button", {
      className: "increment",
      onClick: onIncrement,
      tabIndex: "-1"
    }, "+"), disabledValue === false && createElement("button", {
      className: "decrement",
      onClick: onDecrement,
      tabIndex: "-1"
    }, "-")), inputType && createElement("div", {
      className: "number-widget-type"
    }, inputType));
  }
}

export { NumberIncrement as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
