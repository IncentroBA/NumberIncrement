define(['react', 'big.js'], (function (react, Big) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var Big__default = /*#__PURE__*/_interopDefaultLegacy(Big);

    function NumberIncrement({
      inputAttr,
      inputType,
      interval,
      maxNumber,
      minNumber,
      onChange,
      readOnlyStyle,
      ...rest
    }) {
      const id = rest.id || "";
      const style = rest.class || "";
      const widgetName = rest.name || "";
      const stepInterval = Number(interval);
      const [currentValue, setCurrentValue] = react.useState("");
      const [disabledValue, setDisabledValue] = react.useState(false);
      react.useEffect(() => {
        if (inputAttr.status === "available" && currentValue === "") {
          setCurrentValue(String(inputAttr.displayValue));
        } else if (currentValue !== "") {
          inputAttr.setValue(Big__default["default"](currentValue));
        }
        if (inputAttr.status === "available" && inputAttr.readOnly === true) {
          setDisabledValue(true);
        }
      }, [currentValue, inputAttr]);
      function handleOnChange() {
        if (onChange && onChange.canExecute) {
          onChange.execute();
        }
      }
      function onChangeInput(event) {
        let value = event.target.value;

        // Remove leading zeros (but keep "0" if that's the only digit)
        value = value.replace(/^0+(?=\d)/, "");
        setCurrentValue(value);
        const numValue = Number(value);
        if (numValue >= maxNumber) {
          setCurrentValue(String(maxNumber));
          inputAttr.setValue(Big__default["default"](maxNumber));
        } else if (numValue <= minNumber) {
          setCurrentValue(String(minNumber));
          inputAttr.setValue(Big__default["default"](minNumber));
        } else {
          inputAttr.setValue(Big__default["default"](value));
        }
        handleOnChange();
      }
      function onIncrement() {
        const numValue = Number(currentValue) || 0;
        const newValue = Math.min(numValue + stepInterval, maxNumber);
        setCurrentValue(String(newValue));
        inputAttr.setValue(Big__default["default"](newValue));
        handleOnChange();
      }
      function onDecrement() {
        const numValue = Number(currentValue) || 0;
        const newValue = Math.max(numValue - stepInterval, minNumber);
        setCurrentValue(String(newValue));
        inputAttr.setValue(Big__default["default"](newValue));
        handleOnChange();
      }
      if (disabledValue && disabledValue === true && readOnlyStyle === "text") {
        return react.createElement("div", {
          className: `number-widget ${style}`
        }, react.createElement("p", {
          className: `${widgetName} form-control-static`
        }, currentValue, inputType));
      } else {
        return react.createElement("div", {
          className: `number-widget ${style}`
        }, react.createElement("input", {
          id: id,
          className: `${widgetName} form-control ${inputType && "has-type"}`,
          type: "number",
          onChange: onChangeInput,
          value: currentValue,
          disabled: disabledValue
        }), react.createElement("div", {
          className: "number-widget-buttons"
        }, disabledValue === false && react.createElement("button", {
          className: "increment",
          onClick: onIncrement,
          tabIndex: "-1"
        }, "+"), disabledValue === false && react.createElement("button", {
          className: "decrement",
          onClick: onDecrement,
          tabIndex: "-1"
        }, "-")), inputType && react.createElement("div", {
          className: "number-widget-type"
        }, inputType));
      }
    }

    return NumberIncrement;

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
