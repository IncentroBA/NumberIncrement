
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
define(['react', 'big.js'], (function (react, Big) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var Big__default = /*#__PURE__*/_interopDefaultLegacy(Big);

    function NumberIncrement({
      inputAttr,
      inputType,
      interval,
      maxNumber,
      minNumber,
      onChange,
      readOnlyStyle,
      ...rest
    }) {
      const id = rest.id || "";
      const style = rest.class || "";
      const widgetName = rest.name || "";
      const stepInterval = Number(interval);
      const [currentValue, setCurrentValue] = react.useState(null);
      const [disabledValue, setDisabledValue] = react.useState(false);
      react.useEffect(() => {
        if (inputAttr.status === "available" && currentValue === null) {
          setCurrentValue(Number(inputAttr.displayValue));
        } else if (currentValue) {
          inputAttr.setValue(Big__default["default"](currentValue));
        }
        if (inputAttr.status === "available" && inputAttr.readOnly === true) {
          setDisabledValue(true);
        }
      }, [currentValue, inputAttr]);
      function handleOnChange() {
        if (onChange && onChange.canExecute) {
          onChange.execute();
        }
      }
      function onChangeInput(event) {
        if (event.target.value >= maxNumber) {
          setCurrentValue(maxNumber);
          inputAttr.setValue(Big__default["default"](maxNumber));
        } else if (event.target.value <= minNumber) {
          setCurrentValue(minNumber);
          inputAttr.setValue(Big__default["default"](minNumber));
        } else {
          setCurrentValue(Number(event.target.value));
        }
        handleOnChange();
      }
      function onIncrement() {
        if (currentValue + stepInterval >= maxNumber) {
          setCurrentValue(maxNumber);
        } else {
          setCurrentValue(currentValue + stepInterval);
        }
        handleOnChange();
      }
      function onDecrement() {
        if (currentValue - stepInterval <= minNumber) {
          setCurrentValue(minNumber);
          inputAttr.setValue(Big__default["default"](minNumber));
        } else {
          setCurrentValue(currentValue - stepInterval);
          inputAttr.setValue(Big__default["default"](currentValue - stepInterval));
        }
        handleOnChange();
      }
      if (disabledValue && disabledValue === true && readOnlyStyle === "text") {
        return react.createElement("div", {
          className: `number-widget ${style}`
        }, react.createElement("p", {
          className: `${widgetName} form-control-static`
        }, currentValue, inputType));
      } else {
        return react.createElement("div", {
          className: `number-widget ${style}`
        }, react.createElement("input", {
          id: id,
          className: `${widgetName} form-control ${inputType && "has-type"}`,
          type: "number",
          onChange: onChangeInput,
          value: currentValue,
          disabled: disabledValue
        }), react.createElement("div", {
          className: "number-widget-buttons"
        }, disabledValue === false && react.createElement("button", {
          className: "increment",
          onClick: onIncrement,
          tabIndex: "-1"
        }, "+"), disabledValue === false && react.createElement("button", {
          className: "decrement",
          onClick: onDecrement,
          tabIndex: "-1"
        }, "-")), inputType && react.createElement("div", {
          className: "number-widget-type"
        }, inputType));
      }
    }

    return NumberIncrement;

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
